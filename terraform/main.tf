data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-*-*-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  # Canonical
  owners = ["099720109477"]
}

data "aws_subnets" "public" {
  filter {
    name   = "tag:Tier"
    values = ["public"]
  }
}

data "aws_subnet" "public" {
  for_each = toset(data.aws_subnets.public.ids)
  id       = each.value
}

resource "aws_lb" "nlb" {
  name               = "demo-lb"
  internal           = false
  load_balancer_type = "network"
  subnets            = [for subnet in data.aws_subnet.public : subnet.id]
}

resource "aws_lb_target_group" "demo-tg" {
  name     = "demo-lb-tg"
  port     = "6443"
  protocol = "TCP"
  vpc_id   = var.VPC_ID
}

resource "aws_lb_listener" "demo-listener" {
  load_balancer_arn = aws_lb.nlb.arn
  port              = "6443"
  protocol          = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.demo-tg.arn
  }

  depends_on = [
    aws_lb.nlb,
    aws_lb_target_group.demo-tg
  ]
}

resource "aws_lb_target_group_attachment" "demo-tg-attachment" {
  count            = length(aws_instance.controlplane)
  target_group_arn = aws_lb_target_group.demo-tg.arn
  target_id        = aws_instance.controlplane[count.index].id
  port             = 6443

  depends_on = [
    aws_instance.controlplane,
    aws_lb_target_group.demo-tg
  ]
}

resource "tls_private_key" "ec2_instance_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "local_file" "ec2_instance_key" {
  filename        = "../ansible/id_rsa"
  content         = tls_private_key.ec2_instance_key.private_key_openssh
  file_permission = "0400"

  depends_on = [
    tls_private_key.ec2_instance_key
  ]
}

resource "local_file" "ansible_hosts_file" {
  filename = "../ansible/hosts"
  content  = <<-EOF
  # Ansible hosts file generated by Terraform
  [all:vars]
  ansible_user=ubuntu
  ansible_ssh_private_key_file=id_rsa
  LOAD_BALANCER_DNS=${aws_lb.nlb.dns_name}

  [controlplane]
  %{for item in aws_instance.controlplane~}
  ${~item.public_dns} ansible_host=${item.public_ip}
  %{endfor~}

  [worker]
  %{for item in aws_instance.worker~}
  ${~item.public_dns} ansible_host=${item.public_ip}
  %{endfor~}
  EOF

  depends_on = [
    aws_instance.controlplane,
    aws_instance.worker,
    aws_lb.nlb
  ]
}

resource "aws_key_pair" "ec2_instance_key" {
  key_name   = "demo-key"
  public_key = tls_private_key.ec2_instance_key.public_key_openssh
}

resource "aws_instance" "controlplane" {
  ami           = data.aws_ami.ubuntu.id
  key_name      = aws_key_pair.ec2_instance_key.key_name
  instance_type = var.EC2_INSTANCE_TYPE
  count         = var.CONTROL_PLANE_COUNT

  tags = {
    Name = "${var.CLUSTER_NAME}control${count.index + 1}"
  }

  depends_on = [
    aws_key_pair.ec2_instance_key
  ]
}

resource "aws_instance" "worker" {
  ami           = data.aws_ami.ubuntu.id
  key_name      = aws_key_pair.ec2_instance_key.key_name
  instance_type = var.EC2_INSTANCE_TYPE
  count         = var.WORKER_COUNT

  tags = {
    Name = "${var.CLUSTER_NAME}worker${count.index + 1}"
  }

  depends_on = [
    aws_key_pair.ec2_instance_key
  ]
}